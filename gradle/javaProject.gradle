apply plugin: "java"
apply plugin: "com.github.spotbugs"
apply plugin: "checkstyle"
apply plugin: 'maven-publish'
apply plugin: 'jacoco'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sourceCompatibility = JavaVersion.VERSION_17

configurations {
    bDistributionDir
    balTools
    jacocoRuntime
}

dependencies {
    jacocoRuntime "org.jacoco:org.jacoco.agent:0.8.5:runtime"

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.15.2'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.15.2'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.15.2'
    implementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-test-utils', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-tools-api', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-parser', version: "${ballerinaLangVersion}"
    testImplementation 'org.testng:testng:7.6.1'

    checkstyle project(":build-config:checkstyle")
    checkstyle "com.puppycrawl.tools:checkstyle:${puppycrawlCheckstyleVersion}"
    balTools("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
}

def bDistribution = file("$project.buildDir/extracted-distribution/jballerina-tools-${ballerinaLangVersion}")
def packageOrg = "ballerina"

task unzip {
    doLast {
        configurations.balTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File(project.buildDir, "extracted-distribution/")
            }
        }
    }
    outputs.dir bDistribution
}

task unpackStdLibs() {
    dependsOn unzip
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${project.buildDir}/extracted-distribution", artifact.name + "-zip")
            }
        }
    }
}

task copyStdlibs(type: Copy) {
    dependsOn unpackStdLibs
    into bDistribution
    duplicatesStrategy = 'include'

    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${project.buildDir}/extracted-distribution/" + artifact.name + "-zip"
        into("bir-cache/") {
            from "${artifactExtractedPath}/caches/bir"
        }
        into("bre/lib/") {
            from "${artifactExtractedPath}/libs"
        }
        into("docs/") {
            from "${artifactExtractedPath}/docs"
        }
        // pack to new cache
        into("cache/bir/") {
            from "${artifactExtractedPath}/caches/bir"
        }
        into("cache/bala/") {
            from "${artifactExtractedPath}/caches/bala"
        }
        into("cache/jar/") {
            from "${artifactExtractedPath}/caches/jar"
        }
        into("repo/bala") {
            from "${artifactExtractedPath}/bala/"
        }
    }
}

task copyLib(type: Copy) {
    dependsOn unzip
    dependsOn jar
    into("${bDistribution}/bre/lib/")
    from "${project.buildDir}/libs"
}

test {
    dependsOn copyStdlibs
    dependsOn copyLib
    systemProperty "java.util.logging.config.file", "src/test/resources/logging.properties"
    systemProperty "ballerina.home", "$bDistribution.absolutePath"

    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }

    afterSuite { suite, result ->
        result.exception?.printStackTrace()
    }

    testLogging {
        // this will only change --warn flag behaviour
        warn {
            events = ["failed", "skipped"]
            exceptionFormat "full"
        }
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}

spotbugsMain {
    ignoreFailures = true
    effort = "max"
    reportLevel = "low"
    reportsDir = file("$project.buildDir/reports/spotbugs")
    def excludeFile = file("spotbugs-exclude.xml")
    if (excludeFile.exists()) {
        it.excludeFilter = excludeFile
    }
    reports {
        text.enabled = true
    }
}

spotbugsTest {
    enabled = false
}

task validateSpotbugs() {
    doLast {
        if (spotbugsMain.reports.size() > 0 &&
                spotbugsMain.reports[0].destination.exists() &&
                spotbugsMain.reports[0].destination.text.readLines().size() > 0) {
            spotbugsMain.reports[0].destination?.eachLine {
                println 'Failure: ' + it
            }
            throw new GradleException("Spotbugs rule violations were found.");
        }
    }
}

checkstyle {
    toolVersion '7.8.2'
    configFile rootProject.file("build-config/checkstyle/build/checkstyle.xml")
    configProperties = ["suppressionFile" : rootProject.file("build-config/checkstyle/build/suppressions.xml")]
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.name
            version = project.version
            from components.java
        }
    }
}

spotbugsMain.finalizedBy validateSpotbugs
checkstyleMain.dependsOn(":build-config:checkstyle:downloadMultipleFiles")
